#!/bin/sh
# -*- mode: shell-script; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Copyright (C) 2012, 2013 O.S. Systems Software LTDA.
# Authored-by:  Otavio Salvador <otavio@ossystems.com.br>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Add options for the script
# Copyright (C) 2013 Freescale Semiconductor, Inc.
#
# This script was modified to fit Actia needs 
#
NCPU=`grep -c processor /proc/cpuinfo`
CWD=`pwd`
PROGNAME="setup-environment"

usage()
{
    echo -e "\nUsage: source $PROGNAME <build-dir>
    <build-dir>: specifies the build directory location (required)

If undefined, this script will set \$MACHINE to 'raspberrypi'
                                   \$DISTRO  to 'poky'
"

    ls sources/*/conf/machine/*.conf > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        #display only actia machines
        echo -e "
Supported machines: `echo; ls sources/*raspberrypi*/conf/machine/*.conf \
| sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%"`

To build for a machine listed above, run this script as:
MACHINE=<machine> source $PROGNAME <build-dir>

You can also tune some important parameters like:
    DL_DIR=<path/to/your/download/directory>  # Path to Yocto download directory
    SSTATE_DIR=<path/to/your/sstate/dir>      # Path to the shared state cache
    DISTRO=<distro_name>                      # Specify distro to use
"
    fi
}

clean_up()
{
   unset LIST_MACHINES VALID_MACHINE
   unset NCPU CWD SHORTOPTS LONGOPTS ARGS PROGNAME
   unset generated_config updated
   unset MACHINE SDKMACHINE DISTRO OEROOT
}

# get command line options
SHORTOPTS="h"
LONGOPTS="help"

ARGS=$(getopt --options $SHORTOPTS  \
  --longoptions $LONGOPTS --name $PROGNAME -- "$@" )
# Print the usage menu if invalid options are specified
if [ $? != 0 -o $# -lt 1 ]; then
   usage && clean_up
   return 1
fi

eval set -- "$ARGS"
while true;
do
    case $1 in
        -h|--help)
           usage
           clean_up
           return 0
           ;;
        --)
           shift
           break
           ;;
    esac
done

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use the BSP as root. Exiting..."
fi

if [ -z "$MACHINE" ]; then
    MACHINE='raspberrypi'
fi

# Check the machine type specified, only in *actia* (so suppose actia related)
LIST_MACHINES=`ls -1 $CWD/sources/*raspberrypi*/conf/machine`
VALID_MACHINE=`echo -e "$LIST_MACHINES" | grep ${MACHINE}.conf$ | wc -l`
if [ "x$MACHINE" = "x" ] || [ "$VALID_MACHINE" = "0" ]; then
    echo -e "\nThe \$MACHINE you have specified ($MACHINE) is not supported by this build setup"
    usage && clean_up
    return 1
else
    if [ ! -e $1/conf/local.conf.sample ]; then
        echo "Configuring for ${MACHINE}"
    fi
fi

if [ -z "$SDKMACHINE" ]; then
    SDKMACHINE='i686'
fi

if [ -z "$DISTRO" ]; then
    DISTRO='poky'
fi

if [ -z "$DL_DIR" ]; then
    DL_DIR="${HOME}/downloads/"
fi

if [ -z "$SSTATE_DIR" ]; then
    SSTATE_DIR="\${TOPDIR}/../sstate-cache"
fi


OEROOT=sources/poky
if [ -e sources/oe-core ]; then
    OEROOT=sources/oe-core
fi

# Ensure all files in sources/base are kept in sync with project root
updated=0
for f in $CWD/sources/*aragua*/base/raspberrypi/*.conf; do
    file="$(basename $f)"
    file_dest=$CWD/$1/conf/$file
    if [ -f $file_dest ]; then
        if ! cmp -s "$f" "$file_dest"; then
            updated=1
            cp $f $file_dest
        fi
    fi
done

cd $OEROOT

. ./oe-init-build-env $CWD/$1 > /dev/null

# if conf/local.conf not generated, no need to go further
if [ ! -e conf/local.conf ]; then
    clean_up && return 1
fi

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
export PATH="`echo $PATH | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//'`"

generated_config=
if [ ! -e conf/local.conf.sample ]; then
    mv conf/local.conf conf/local.conf.sample

    # Generate the local.conf based on the Yocto defaults
    grep -v '^#\|^$' conf/local.conf.sample > conf/local.conf
    cat >> conf/local.conf <<EOF

DL_DIR ?= "$DL_DIR"
SSTATE_DIR ?= "$SSTATE_DIR"
EOF
    # Change settings according environment
    sed -e "s,MACHINE ??=.*,MACHINE ??= '$MACHINE',g" \
        -e "s,SDKMACHINE ??=.*,SDKMACHINE ??= '$SDKMACHINE',g" \
        -e "s,DISTRO ?=.*,DISTRO ?= '$DISTRO',g" \
        -i conf/local.conf
    # Remove EXTRA_IMAGE_FEATURES = "debug-tweaks" cause we define
    # actia-image-dev for debug purpose
    # Revmove all default packageconfig and use package_classes from
    # distro
    sed -e "s,EXTRA_IMAGE_FEATURES.*,,g" \
        -e "s,PACKAGE_CLASSES.*,,g" \
        -e "s,PACKAGECONFIG.*,,g" \
        -e "s,ASSUME_PROVIDED.*,,g" -i conf/local.conf

    cp $CWD/sources/*aragua*/base/conf/* conf/

    for s in $HOME/.oe $HOME/.yocto; do
        if [ -e $s/site.conf ]; then
            echo "Linking $s/site.conf to conf/site.conf"
            ln -s $s/site.conf conf
        fi
    done

    generated_config=1
fi

if ! grep -q 'INCOMPATIBLE_LICENSE\s*=' conf/local.conf; then
    echo "INCOMPATIBLE_LICENSE = \"GPLv3\"" >> conf/local.conf
fi

if ! grep -q 'INHERIT\s*+=' conf/local.conf; then
    echo "INHERIT += \"rm_work\"" >> conf/local.conf
    echo "INHERIT += \"buildhistory\"" >> conf/local.conf
    echo "RM_WORK_EXCLUDE += \"\"" >> conf/local.conf
fi

######

cat <<EOF

Welcome to aragua BSP

The Yocto Project has extensive documentation about OE including a
reference manual which can be found at:
    http://yoctoproject.org/documentation

For more information about OpenEmbedded see their website:
    http://www.openembedded.org/

You can now run 'bitbake <target>'

Common targets are:
    rpi-basic-image

EOF

if [ -n "$generated_config" ]; then
    cat <<EOF
Your build environment has been configured with:

    MACHINE=$MACHINE
    SDKMACHINE=$SDKMACHINE
    DISTRO=$DISTRO
    DL_DIR=$DL_DIR
    SSTATE_DIR=$SSTATE_DIR
EOF
else 
    if [ $updated -eq 1 ]; then
        echo "Your configuration files at $1 have been updated."
    else
        echo "Your configuration files at $1 have not been touched."
    fi
fi

clean_up
